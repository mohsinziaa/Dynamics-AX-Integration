@page
@model ax.Pages.IndexModel
@{
    ViewData["Title"] = "Customer Data";
    ViewData["CurrentPage"] = "/Index";
}

<style>
    .customer-form {
        padding: 25px;
        box-shadow: 0 5px 10px rgba(0, 0, 0, 0.1);
        border-radius: 10px;
    }
</style>

<form class="customer-form">
    <legend>Customer Information</legend>
    <div class="row mb-3">
        <div class="col">
            <label for="Name" class="form-label">Name</label>
            <input type="text" class="form-control" id="Name">
        </div>
        <div class="col">
            <label for="customerAccount" class="form-label">Customer Account</label>
            <input type="text" class="form-control" id="customerAccount" readonly>
        </div>
    </div>
    <div class="mb-3">
        <label for="deliveryAddress" class="form-label">Delivery Address</label>
        <textarea class="form-control" id="deliveryAddress" rows="2" readonly></textarea>
    </div>

    <hr class="mt-5 mt-4" />
    <legend class="mt-2">General Information</legend>
    <div class="row mb-3">
        <div class="col">
            <label for="podDate" class="form-label">Date Of POD</label>
            <input type="date" class="form-control" id="podDate">
        </div>
        <div class="col">
            <label for="site" class="form-label">Site</label>
            <select class="form-select" id="site">
                <option value="MATCO01">MATCO01</option>
                <option value="MATCO02">MATCO02</option>
                <option value="MATCO13">MATCO13</option>
                <option value="RIVIANA">RIVIANA</option>
                <option value="GODOWNS" selected>GODOWNS</option>
            </select>
        </div>
        <div class="col">
            <label for="warehouse" class="form-label">Warehouse</label>
            <select class="form-select" id="warehouse" readonly>
                <option value="SD-Main">SD-Main</option>
            </select>
        </div>
    </div>

    <hr class="mt-5 mt-4" />
    <legend class="mt-2">References</legend>
    <div class="row mb-3">
        <div class="col-md-3">
            <label for="customerRequisition" class="form-label">Customer Requisition</label>
            <input type="text" class="form-control" id="customerRequisition">
        </div>
        <div class="col">
            <label for="reference" class="form-label">Reference</label>
            <input type="text" class="form-control" id="reference">
        </div>
    </div>

    <div class="d-flex justify-content-end mt-5">
        <button class="btn btn-primary" type="button" id="createItemsBtn" disabled>
            Create Items
            <span class="spinner-border spinner-border-sm ms-2" role="status" aria-hidden="true" style="display:none;"></span>
        </button>
    </div>
</form>

<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>

<script>
    $(document).ready(function () {
        // Set default date to today's date
        $("#podDate").val(new Date().toISOString().split('T')[0]);

        // Fetch customer data on blur instead of keydown
        $("#Name").on("blur", function () {
            fetchCustomerData();
        });

        function fetchCustomerData() {
            let customerName = $("#Name").val().trim();
            if (!customerName) return;

            $.ajax({
                url: "/Index?handler=FetchCustomerData",
                type: "GET",
                data: { customerName: customerName },
                success: function(response) {
                    // On success, handle the response
                    if (response && !response.error) {
                        $("#customerAccount").val(response.customerAccount);
                        $("#deliveryAddress").val(response.deliveryAddress);
                        enableCreateButton();
                    } else {
                        alert("Customer not found!");
                    }
                },
                error: function() {
                    // On failure, handle the error
                    alert("Error Fetching Customer Account!");
                }
            });
        }

        // Function to enable/disable the "Create Items" button based on required fields
        function enableCreateButton() {
            let customerName = $("#Name").val().trim();
            let customerAccount = $("#customerAccount").val().trim();

            if (customerName && customerAccount) {
                $("#createItemsBtn").prop("disabled", false);
            } else {
                $("#createItemsBtn").prop("disabled", true);
            }
        }

        // Monitor changes in Name and Customer Account fields to enable/disable the button
        $("#Name, #customerAccount").on("input", function () {
            enableCreateButton();
        });

        // Collect form data on button click
        $("#createItemsBtn").on("click", function (event) {
            event.preventDefault();

            // Disable button and show loading spinner
            $(this).prop("disabled", true);
            $(this).find(".spinner-border").show();

            let customerData = {
                name: $("#Name").val(),
                customerAccount: $("#customerAccount").val(),
                deliveryAddress: $("#deliveryAddress").val(),
                podDate: $("#podDate").val(),
                site: $("#site").val(),
                warehouse: $("#warehouse").val(),
                customerRequisition: $("#customerRequisition").val(),
                reference: $("#reference").val()
            };

            // Store the data in sessionStorage
            sessionStorage.setItem("customerData", JSON.stringify(customerData));

            console.log(customerData);

            // Simulate a delay to show the loading spinner
            setTimeout(function() {
                window.location.href = "/Items";
            }, 2000);
        });
    });
</script>
